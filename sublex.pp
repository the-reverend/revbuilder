{ lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG }
{  template modified by ron wilson                        }

{ global definitions: }
var
  tempstr: ansistring;

const NORMAL = 2;
const SQUOTE = 4;
const DQUOTE = 6;
const COMMENT = 8;

function yysublex(var yyvars : tyyvars; var ll: tliblist ) : Integer;

procedure yyaction ( yyruleno : Integer; var yyvars : tyyvars );
  { local definitions: }

begin
  { actions: }
  case yyruleno of
  1:
              start(COMMENT,yyvars);
  2:
              start(SQUOTE, yyvars);
  3:
              start(DQUOTE, yyvars);
  4:
              start(NORMAL, yyvars);
  5:
              start(NORMAL, yyvars);
  6:
              start(NORMAL, yyvars);

  7:
                         
                  begin
                    tempstr:=trim(yyvars.yytext);
                    setlength(tempstr,length(tempstr)-1);
                    tempstr:=trim(tempstr);
                    addlib(tempstr,ll);
                  end;
  8:
                                             
                  begin
                    tempstr:=trim(yyvars.yytext);
                    tempstr:=trim(rightstr(tempstr,length(tempstr)-lastposc(' ',tempstr)));
                    tempstr:=trim(tempstr);
                    addlib(tempstr,ll);
                  end;
  9:
                                                         
                  begin
                    tempstr:=trim(yyvars.yytext);
                    tempstr:=trim(rightstr(tempstr,length(tempstr)-6));
                    tempstr:=trim(tempstr);
                    addlib(tempstr,ll);
                  end;
  10:
                                 
                  begin
                    tempstr:=trim(yyvars.yytext);
                    setlength(tempstr,length(tempstr)-1);
                    tempstr:=trim(tempstr);
                    ll.d[addlib(tempstr,ll)]:=true;
                  end;

  11,
  12,
  13:
                  
                  begin
                    //writeln('EOLN');
                    inc(yyvars.yylineno);
                    yyvars.yycolno:=0;
                  end;

  14:
  ;//write(yyvars.yytext);

  end;
end{yyaction};

{ DFA table: }

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 32;
yynmatches = 32;
yyntrans   = 214;
yynstates  = 74;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  { 3: }
  { 4: }
  { 5: }
  { 6: }
  { 7: }
  { 8: }
  { 9: }
  { 10: }
  12,
  14,
  { 11: }
  13,
  { 12: }
  14,
  { 13: }
  14,
  { 14: }
  2,
  14,
  { 15: }
  3,
  14,
  { 16: }
  14,
  { 17: }
  14,
  { 18: }
  14,
  { 19: }
  14,
  { 20: }
  14,
  { 21: }
  14,
  { 22: }
  14,
  { 23: }
  5,
  14,
  { 24: }
  6,
  14,
  { 25: }
  14,
  { 26: }
  11,
  { 27: }
  1,
  { 28: }
  { 29: }
  { 30: }
  7,
  { 31: }
  { 32: }
  { 33: }
  { 34: }
  { 35: }
  10,
  { 36: }
  { 37: }
  { 38: }
  { 39: }
  { 40: }
  4,
  { 41: }
  { 42: }
  { 43: }
  { 44: }
  { 45: }
  { 46: }
  { 47: }
  { 48: }
  { 49: }
  { 50: }
  { 51: }
  { 52: }
  { 53: }
  { 54: }
  8,
  { 55: }
  8,
  { 56: }
  { 57: }
  { 58: }
  8,
  { 59: }
  { 60: }
  { 61: }
  { 62: }
  9,
  { 63: }
  9,
  { 64: }
  { 65: }
  9
  { 66: }
  { 67: }
  { 68: }
  { 69: }
  { 70: }
  { 71: }
  { 72: }
  { 73: }
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
{ 3: }
{ 4: }
{ 5: }
{ 6: }
{ 7: }
{ 8: }
{ 9: }
{ 10: }
  12,
  14,
{ 11: }
  13,
{ 12: }
  14,
{ 13: }
  14,
{ 14: }
  2,
  14,
{ 15: }
  3,
  14,
{ 16: }
  14,
{ 17: }
  14,
{ 18: }
  14,
{ 19: }
  14,
{ 20: }
  14,
{ 21: }
  14,
{ 22: }
  14,
{ 23: }
  5,
  14,
{ 24: }
  6,
  14,
{ 25: }
  14,
{ 26: }
  11,
{ 27: }
  1,
{ 28: }
{ 29: }
{ 30: }
  7,
{ 31: }
{ 32: }
{ 33: }
{ 34: }
{ 35: }
  10,
{ 36: }
{ 37: }
{ 38: }
{ 39: }
{ 40: }
  4,
{ 41: }
{ 42: }
{ 43: }
{ 44: }
{ 45: }
{ 46: }
{ 47: }
{ 48: }
{ 49: }
{ 50: }
{ 51: }
{ 52: }
{ 53: }
{ 54: }
  8,
{ 55: }
  8,
{ 56: }
{ 57: }
{ 58: }
  8,
{ 59: }
{ 60: }
{ 61: }
{ 62: }
  9,
{ 63: }
  9,
{ 64: }
{ 65: }
  9
{ 66: }
{ 67: }
{ 68: }
{ 69: }
{ 70: }
{ 71: }
{ 72: }
{ 73: }
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
{ 1: }
  ( cc: [ #1..#9,#11,#12,#14..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
{ 2: }
  ( cc: [ #1..#9,#11,#12,#14..' ','%','&','('..'.',
            ':'..'@','['..'^','{'..'}',#127..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '!','#','$','0'..'9','A','B','D'..'R','T'..'Z',
            '_'..'b','d'..'r','t'..'z','~' ]; s: 16),
  ( cc: [ '"' ]; s: 15),
  ( cc: [ '''' ]; s: 14),
  ( cc: [ '/' ]; s: 13),
  ( cc: [ 'C','c' ]; s: 17),
  ( cc: [ 'S','s' ]; s: 18),
{ 3: }
  ( cc: [ #1..#8,#11,#12,#14..#31,'%','&','('..'.',
            ':'..'@','['..'^','{'..'}',#127..#255 ]; s: 12),
  ( cc: [ #9,' ' ]; s: 22),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '!','#','$','0'..'9','A','B','D'..'R','T'..'Z',
            '_'..'b','d'..'r','t'..'z','~' ]; s: 19),
  ( cc: [ '"' ]; s: 15),
  ( cc: [ '''' ]; s: 14),
  ( cc: [ '/' ]; s: 13),
  ( cc: [ 'C','c' ]; s: 20),
  ( cc: [ 'S','s' ]; s: 21),
{ 4: }
  ( cc: [ #1..#9,#11,#12,#14..'&','('..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '''' ]; s: 23),
{ 5: }
  ( cc: [ #1..#9,#11,#12,#14..'&','('..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '''' ]; s: 23),
{ 6: }
  ( cc: [ #1..#9,#11,#12,#14..'!','#'..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '"' ]; s: 24),
{ 7: }
  ( cc: [ #1..#9,#11,#12,#14..'!','#'..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '"' ]; s: 24),
{ 8: }
  ( cc: [ #1..#9,#11,#12,#14..')','+'..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '*' ]; s: 25),
{ 9: }
  ( cc: [ #1..#9,#11,#12,#14..')','+'..#255 ]; s: 12),
  ( cc: [ #10 ]; s: 11),
  ( cc: [ #13 ]; s: 10),
  ( cc: [ '*' ]; s: 25),
{ 10: }
  ( cc: [ #10 ]; s: 26),
{ 11: }
{ 12: }
{ 13: }
  ( cc: [ '*' ]; s: 27),
{ 14: }
{ 15: }
{ 16: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
{ 17: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','B'..'Z','_','`','b'..'z',
            '~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'A','a' ]; s: 31),
{ 18: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'H','J'..'Z','_'..'h',
            'j'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'I','i' ]; s: 32),
{ 19: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
{ 20: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','B'..'Z','_','`','b'..'z',
            '~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'A','a' ]; s: 36),
{ 21: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'H','J'..'Z','_'..'h',
            'j'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'I','i' ]; s: 37),
{ 22: }
  ( cc: [ #9,' ' ]; s: 38),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 39),
{ 23: }
{ 24: }
{ 25: }
  ( cc: [ '/' ]; s: 40),
{ 26: }
{ 27: }
{ 28: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
{ 29: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '(' ]; s: 30),
{ 30: }
{ 31: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'K','M'..'Z','_'..'k',
            'm'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'L','l' ]; s: 41),
{ 32: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'F','H'..'Z','_'..'f',
            'h'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'G','g' ]; s: 42),
{ 33: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
{ 34: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
{ 35: }
{ 36: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'K','M'..'Z','_'..'k',
            'm'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'L','l' ]; s: 43),
{ 37: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'F','H'..'Z','_'..'f',
            'h'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'G','g' ]; s: 44),
{ 38: }
  ( cc: [ #9,' ' ]; s: 38),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 39),
{ 39: }
  ( cc: [ #9,' ' ]; s: 45),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 39),
  ( cc: [ ':' ]; s: 35),
{ 40: }
{ 41: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'K','M'..'Z','_'..'k',
            'm'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'L','l' ]; s: 46),
{ 42: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'M','O'..'Z','_'..'m',
            'o'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'N','n' ]; s: 47),
{ 43: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'K','M'..'Z','_'..'k',
            'm'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'L','l' ]; s: 48),
{ 44: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'M','O'..'Z','_'..'m',
            'o'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'N','n' ]; s: 49),
{ 45: }
  ( cc: [ #9,' ' ]; s: 45),
  ( cc: [ ':' ]; s: 35),
{ 46: }
  ( cc: [ #9,' ' ]; s: 50),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
{ 47: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','B'..'Z','_','`','b'..'z',
            '~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'A','a' ]; s: 51),
{ 48: }
  ( cc: [ #9,' ' ]; s: 52),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
{ 49: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','B'..'Z','_','`','b'..'z',
            '~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'A','a' ]; s: 53),
{ 50: }
  ( cc: [ #9,' ' ]; s: 50),
  ( cc: [ '!','#','$','0'..'9','A'..'N','P'..'Z','_'..'n',
            'p'..'z','~' ]; s: 55),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'O','o' ]; s: 54),
{ 51: }
  ( cc: [ #9,' ' ]; s: 29),
  ( cc: [ '!','#','$','0'..'9','A'..'K','M'..'Z','_'..'k',
            'm'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'L','l' ]; s: 56),
{ 52: }
  ( cc: [ #9,' ' ]; s: 52),
  ( cc: [ '!','#','$','0'..'9','A'..'N','P'..'Z','_'..'n',
            'p'..'z','~' ]; s: 55),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'O','o' ]; s: 54),
{ 53: }
  ( cc: [ #9,' ' ]; s: 34),
  ( cc: [ '!','#','$','0'..'9','A'..'K','M'..'Z','_'..'k',
            'm'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'L','l' ]; s: 57),
{ 54: }
  ( cc: [ '!','#','$','0'..'9','A'..'M','O'..'Z','_'..'m',
            'o'..'z','~' ]; s: 55),
  ( cc: [ 'N','n' ]; s: 58),
{ 55: }
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 55),
{ 56: }
  ( cc: [ #9,' ' ]; s: 59),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 28),
  ( cc: [ '(' ]; s: 30),
{ 57: }
  ( cc: [ #9,' ' ]; s: 60),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 33),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
{ 58: }
  ( cc: [ #9,' ' ]; s: 61),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 55),
{ 59: }
  ( cc: [ #9,' ' ]; s: 59),
  ( cc: [ '!','#','$','0'..'9','A'..'N','P'..'Z','_'..'n',
            'p'..'z','~' ]; s: 63),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ 'O','o' ]; s: 62),
{ 60: }
  ( cc: [ #9,' ' ]; s: 60),
  ( cc: [ '!','#','$','0'..'9','A'..'N','P'..'Z','_'..'n',
            'p'..'z','~' ]; s: 63),
  ( cc: [ '(' ]; s: 30),
  ( cc: [ ':' ]; s: 35),
  ( cc: [ 'O','o' ]; s: 62),
{ 61: }
  ( cc: [ #9,' ' ]; s: 61),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 64),
{ 62: }
  ( cc: [ '!','#','$','0'..'9','A'..'M','O'..'Z','_'..'m',
            'o'..'z','~' ]; s: 63),
  ( cc: [ 'N','n' ]; s: 65),
{ 63: }
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 63),
{ 64: }
  ( cc: [ #9,' ' ]; s: 66),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 64),
{ 65: }
  ( cc: [ #9,' ' ]; s: 67),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 63),
{ 66: }
  ( cc: [ #9,' ' ]; s: 66),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 68),
{ 67: }
  ( cc: [ #9,' ' ]; s: 67),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 69),
{ 68: }
  ( cc: [ #9,' ' ]; s: 70),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 68),
{ 69: }
  ( cc: [ #9,' ' ]; s: 71),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 69),
{ 70: }
  ( cc: [ #9,' ' ]; s: 70),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 55),
{ 71: }
  ( cc: [ #9,' ' ]; s: 71),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 72),
{ 72: }
  ( cc: [ #9,' ' ]; s: 73),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 72),
{ 73: }
  ( cc: [ #9,' ' ]; s: 73),
  ( cc: [ '!','#','$','0'..'9','A'..'Z','_'..'z','~' ]; s: 63)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 1,
{ 10: } 1,
{ 11: } 3,
{ 12: } 4,
{ 13: } 5,
{ 14: } 6,
{ 15: } 8,
{ 16: } 10,
{ 17: } 11,
{ 18: } 12,
{ 19: } 13,
{ 20: } 14,
{ 21: } 15,
{ 22: } 16,
{ 23: } 17,
{ 24: } 19,
{ 25: } 21,
{ 26: } 22,
{ 27: } 23,
{ 28: } 24,
{ 29: } 24,
{ 30: } 24,
{ 31: } 25,
{ 32: } 25,
{ 33: } 25,
{ 34: } 25,
{ 35: } 25,
{ 36: } 26,
{ 37: } 26,
{ 38: } 26,
{ 39: } 26,
{ 40: } 26,
{ 41: } 27,
{ 42: } 27,
{ 43: } 27,
{ 44: } 27,
{ 45: } 27,
{ 46: } 27,
{ 47: } 27,
{ 48: } 27,
{ 49: } 27,
{ 50: } 27,
{ 51: } 27,
{ 52: } 27,
{ 53: } 27,
{ 54: } 27,
{ 55: } 28,
{ 56: } 29,
{ 57: } 29,
{ 58: } 29,
{ 59: } 30,
{ 60: } 30,
{ 61: } 30,
{ 62: } 30,
{ 63: } 31,
{ 64: } 32,
{ 65: } 32,
{ 66: } 33,
{ 67: } 33,
{ 68: } 33,
{ 69: } 33,
{ 70: } 33,
{ 71: } 33,
{ 72: } 33,
{ 73: } 33
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 0,
{ 9: } 0,
{ 10: } 2,
{ 11: } 3,
{ 12: } 4,
{ 13: } 5,
{ 14: } 7,
{ 15: } 9,
{ 16: } 10,
{ 17: } 11,
{ 18: } 12,
{ 19: } 13,
{ 20: } 14,
{ 21: } 15,
{ 22: } 16,
{ 23: } 18,
{ 24: } 20,
{ 25: } 21,
{ 26: } 22,
{ 27: } 23,
{ 28: } 23,
{ 29: } 23,
{ 30: } 24,
{ 31: } 24,
{ 32: } 24,
{ 33: } 24,
{ 34: } 24,
{ 35: } 25,
{ 36: } 25,
{ 37: } 25,
{ 38: } 25,
{ 39: } 25,
{ 40: } 26,
{ 41: } 26,
{ 42: } 26,
{ 43: } 26,
{ 44: } 26,
{ 45: } 26,
{ 46: } 26,
{ 47: } 26,
{ 48: } 26,
{ 49: } 26,
{ 50: } 26,
{ 51: } 26,
{ 52: } 26,
{ 53: } 26,
{ 54: } 27,
{ 55: } 28,
{ 56: } 28,
{ 57: } 28,
{ 58: } 29,
{ 59: } 29,
{ 60: } 29,
{ 61: } 29,
{ 62: } 30,
{ 63: } 31,
{ 64: } 31,
{ 65: } 32,
{ 66: } 32,
{ 67: } 32,
{ 68: } 32,
{ 69: } 32,
{ 70: } 32,
{ 71: } 32,
{ 72: } 32,
{ 73: } 32
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 1,
{ 4: } 1,
{ 5: } 1,
{ 6: } 1,
{ 7: } 1,
{ 8: } 1,
{ 9: } 1,
{ 10: } 1,
{ 11: } 3,
{ 12: } 4,
{ 13: } 5,
{ 14: } 6,
{ 15: } 8,
{ 16: } 10,
{ 17: } 11,
{ 18: } 12,
{ 19: } 13,
{ 20: } 14,
{ 21: } 15,
{ 22: } 16,
{ 23: } 17,
{ 24: } 19,
{ 25: } 21,
{ 26: } 22,
{ 27: } 23,
{ 28: } 24,
{ 29: } 24,
{ 30: } 24,
{ 31: } 25,
{ 32: } 25,
{ 33: } 25,
{ 34: } 25,
{ 35: } 25,
{ 36: } 26,
{ 37: } 26,
{ 38: } 26,
{ 39: } 26,
{ 40: } 26,
{ 41: } 27,
{ 42: } 27,
{ 43: } 27,
{ 44: } 27,
{ 45: } 27,
{ 46: } 27,
{ 47: } 27,
{ 48: } 27,
{ 49: } 27,
{ 50: } 27,
{ 51: } 27,
{ 52: } 27,
{ 53: } 27,
{ 54: } 27,
{ 55: } 28,
{ 56: } 29,
{ 57: } 29,
{ 58: } 29,
{ 59: } 30,
{ 60: } 30,
{ 61: } 30,
{ 62: } 30,
{ 63: } 31,
{ 64: } 32,
{ 65: } 32,
{ 66: } 33,
{ 67: } 33,
{ 68: } 33,
{ 69: } 33,
{ 70: } 33,
{ 71: } 33,
{ 72: } 33,
{ 73: } 33
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 0,
{ 3: } 0,
{ 4: } 0,
{ 5: } 0,
{ 6: } 0,
{ 7: } 0,
{ 8: } 0,
{ 9: } 0,
{ 10: } 2,
{ 11: } 3,
{ 12: } 4,
{ 13: } 5,
{ 14: } 7,
{ 15: } 9,
{ 16: } 10,
{ 17: } 11,
{ 18: } 12,
{ 19: } 13,
{ 20: } 14,
{ 21: } 15,
{ 22: } 16,
{ 23: } 18,
{ 24: } 20,
{ 25: } 21,
{ 26: } 22,
{ 27: } 23,
{ 28: } 23,
{ 29: } 23,
{ 30: } 24,
{ 31: } 24,
{ 32: } 24,
{ 33: } 24,
{ 34: } 24,
{ 35: } 25,
{ 36: } 25,
{ 37: } 25,
{ 38: } 25,
{ 39: } 25,
{ 40: } 26,
{ 41: } 26,
{ 42: } 26,
{ 43: } 26,
{ 44: } 26,
{ 45: } 26,
{ 46: } 26,
{ 47: } 26,
{ 48: } 26,
{ 49: } 26,
{ 50: } 26,
{ 51: } 26,
{ 52: } 26,
{ 53: } 26,
{ 54: } 27,
{ 55: } 28,
{ 56: } 28,
{ 57: } 28,
{ 58: } 29,
{ 59: } 29,
{ 60: } 29,
{ 61: } 29,
{ 62: } 30,
{ 63: } 31,
{ 64: } 31,
{ 65: } 32,
{ 66: } 32,
{ 67: } 32,
{ 68: } 32,
{ 69: } 32,
{ 70: } 32,
{ 71: } 32,
{ 72: } 32,
{ 73: } 32
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 4,
{ 2: } 7,
{ 3: } 16,
{ 4: } 26,
{ 5: } 30,
{ 6: } 34,
{ 7: } 38,
{ 8: } 42,
{ 9: } 46,
{ 10: } 50,
{ 11: } 51,
{ 12: } 51,
{ 13: } 51,
{ 14: } 52,
{ 15: } 52,
{ 16: } 52,
{ 17: } 55,
{ 18: } 59,
{ 19: } 63,
{ 20: } 67,
{ 21: } 72,
{ 22: } 77,
{ 23: } 79,
{ 24: } 79,
{ 25: } 79,
{ 26: } 80,
{ 27: } 80,
{ 28: } 80,
{ 29: } 83,
{ 30: } 85,
{ 31: } 85,
{ 32: } 89,
{ 33: } 93,
{ 34: } 97,
{ 35: } 100,
{ 36: } 100,
{ 37: } 105,
{ 38: } 110,
{ 39: } 112,
{ 40: } 115,
{ 41: } 115,
{ 42: } 119,
{ 43: } 123,
{ 44: } 128,
{ 45: } 133,
{ 46: } 135,
{ 47: } 138,
{ 48: } 142,
{ 49: } 146,
{ 50: } 151,
{ 51: } 155,
{ 52: } 159,
{ 53: } 164,
{ 54: } 169,
{ 55: } 171,
{ 56: } 172,
{ 57: } 175,
{ 58: } 179,
{ 59: } 181,
{ 60: } 185,
{ 61: } 190,
{ 62: } 192,
{ 63: } 194,
{ 64: } 195,
{ 65: } 197,
{ 66: } 199,
{ 67: } 201,
{ 68: } 203,
{ 69: } 205,
{ 70: } 207,
{ 71: } 209,
{ 72: } 211,
{ 73: } 213
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 3,
{ 1: } 6,
{ 2: } 15,
{ 3: } 25,
{ 4: } 29,
{ 5: } 33,
{ 6: } 37,
{ 7: } 41,
{ 8: } 45,
{ 9: } 49,
{ 10: } 50,
{ 11: } 50,
{ 12: } 50,
{ 13: } 51,
{ 14: } 51,
{ 15: } 51,
{ 16: } 54,
{ 17: } 58,
{ 18: } 62,
{ 19: } 66,
{ 20: } 71,
{ 21: } 76,
{ 22: } 78,
{ 23: } 78,
{ 24: } 78,
{ 25: } 79,
{ 26: } 79,
{ 27: } 79,
{ 28: } 82,
{ 29: } 84,
{ 30: } 84,
{ 31: } 88,
{ 32: } 92,
{ 33: } 96,
{ 34: } 99,
{ 35: } 99,
{ 36: } 104,
{ 37: } 109,
{ 38: } 111,
{ 39: } 114,
{ 40: } 114,
{ 41: } 118,
{ 42: } 122,
{ 43: } 127,
{ 44: } 132,
{ 45: } 134,
{ 46: } 137,
{ 47: } 141,
{ 48: } 145,
{ 49: } 150,
{ 50: } 154,
{ 51: } 158,
{ 52: } 163,
{ 53: } 168,
{ 54: } 170,
{ 55: } 171,
{ 56: } 174,
{ 57: } 178,
{ 58: } 180,
{ 59: } 184,
{ 60: } 189,
{ 61: } 191,
{ 62: } 193,
{ 63: } 194,
{ 64: } 196,
{ 65: } 198,
{ 66: } 200,
{ 67: } 202,
{ 68: } 204,
{ 69: } 206,
{ 70: } 208,
{ 71: } 210,
{ 72: } 212,
{ 73: } 214
);


var yyn : Integer;

label start, scan, action, readnext;

begin

  inc(yyvars.yyiter);
  if yyvars.yyiter>1 then goto scan;

start:
  { initialize: }
  yynew(yyvars);

scan:
  { mark positions and matches: }
  for yyn := yykl[yyvars.yystate] to     yykh[yyvars.yystate] do yymark(yyk[yyn],yyvars);
  for yyn := yymh[yyvars.yystate] downto yyml[yyvars.yystate] do yymatch(yym[yyn],yyvars);

  if yytl[yyvars.yystate]>yyth[yyvars.yystate] then goto action; { dead state }

  { get next character: }
  yyscan(yyvars);

  { determine action: }
  yyn := yytl[yyvars.yystate];
  while (yyn<=yyth[yyvars.yystate]) and not (yyvars.yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yyvars.yystate] then goto action;
    { no transition on yyactchar in this state }

  { switch to new state: }
  yyvars.yystate := yyt[yyn].s;

  if yyvars.bufptr>yyvars.buflen then goto readnext
  else goto scan;

action:
  { execute action: }
  if yyfind(yyvars.yyrule,yyvars) then
  begin
    yyaction(yyvars.yyrule,yyvars);
    if yyvars.yyreject then goto action;
  end
  else if yyvars.bufptr>yyvars.buflen then goto readnext
       else if not yydefault(yyvars) then
            begin
              yyclear(yyvars);
              return(0,yyvars);
            end;

  if not yyvars.yydone then goto start;

readnext:
  yysublex := yyvars.yyretval;

end;

